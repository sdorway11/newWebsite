<configuration xmlns="http://schemas.microsoft.com/.NetConfiguration/v2.0">
	<configSections>
	</configSections>
	<system.web>
		<!--
			If you want to see error from a remote host:
		-->
		
			<customErrors mode="Off" /> 
		
		<!--
			If you want a custom error page.  
		-->
		<!-- <customErrors mode="On" redirectMode="ResponseRewrite" defaultRedirect="~/error.html" /> -->
		<!--
		<customErrors mode="On">   
			<error statusCode="404" redirect="error404.html" />
		</customErrors>
		-->
		<!--
			BugTracker.NET is not compatible with Session serialization.
			Timeout session after 120 minutes
		-->
		<sessionState mode="InProc" timeout="120" />
		<compilation debug="true" targetFramework="4.0">
			<assemblies>
				<add assembly="System.DirectoryServices.Protocols, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A" />
				<add assembly="System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A" />
				<add assembly="System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089" /></assemblies>
		</compilation>
		<pages validateRequest="true" controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID" />
		<!-- 
		If you are changing maxRequestLength, you probably also want to change MaxUploadSize below. maxRequestLength is in KB. MaxUploadSize is in bytes.
		-->
		<!--
		<httpRuntime executionTimeout="110" maxRequestLength="51200"/>
		or... if you are using .NET 4.0, see http://www.asp.net/learn/whitepapers/aspnet4/breaking-changes#0.1__Toc256770147
		-->
		<httpRuntime requestValidationMode="2.0" executionTimeout="110" maxRequestLength="51200" />

		<!-- for my testing <globalization culture="de-DE" uiCulture="en-US" /> -->
		
	</system.web>
	<system.net>
		<!-- deliveryMethod Specifies the delivery method for e-mails. Acceptable values are network, pickupDirectoryFromIis, and specifiedPickupDirectory. -->
		<!-- what I use for testing - emails just go into the folder and don't get sent.  You probably don't want this setting. -->
		<mailSettings>
			<smtp from="president@prosperitconsulting.com"> 
				<network host="173.247.249.253" port="587" userName="president@prosperitconsulting.com" password="Z^V^Zd3v" />
			</smtp>
		</mailSettings>
		<!-- These settings work for me for GMail -->
		<!--
		<mailSettings>
			<smtp> 
				<network
					host="secure127.inmotionhosting.com"
					port="465"
					userName="president@prosperitconsulting.com"
					password="Z^V^Zd3v"
				/>
			</smtp>
		</mailSettings>
		-->
		<!-- These settings work for my demo site hosted at GoDaddy -->
		<!--
		<mailSettings>
			<smtp> 
				<network
					host="secure127.inmotionhosting.com"
					port="25"
					userName="president@prosperitconsulting.com"
					password="Z^V^Zd3v"
				/>
			</smtp>
		</mailSettings>
		-->
		<!-- These settings do NOT for me for sbcglobal acct because of the issue here:  http://stackoverflow.com/questions/172203/why-does-system-net-mail-fail-where-system-web-mail-works  -->
		<!--
		<mailSettings>
			<smtp> 
				<network
					host="smtp.att.yahoo.com"
					port="465"
					userName="ctrager@sbcglobal.net"
					password="MY PASSWORD"
				/>
			</smtp>
		</mailSettings>
	    -->
	</system.net>
	<appSettings>
		<!-- 

			********* QUICK START *************
     	
     		If you want to get started quickly, then just change the following
     		and then try to log in:
     		
				ConnectionString
				AbsouteUrlPrefix
			
			After you can log in and create a bug, then you probably want to
			set up the email integration.  Set up the following:
			
				ErrorEmailTo
				ErrorEmailFrom

				NotificationEmailEnabled
				NotificationEmailFrom

				And your SMTP settings below.

     	-->
		<!--
			Change this to point to your database
		-->
		<add key="ConnectionString" value="server=TECHACADEMYTFS\TADB1;database=bugtracker;Integrated Security=SSPI;" />
		<!--
			Used when creating absolute href's.  For example, in notification emails.
			Don't forget trailing slash!.
		-->
		<add key="AbsoluteUrlPrefix" value="http://127.0.0.1/btnet/" />
		<!--
			You can turn the logging and emailing of errors on and off.
			Log file name is "btnet_log_yyyy_mm_dd.txt"
			
			For the LogFileFolder setting, if you specify the folder starting with a 
			drive letter or the \\ that indicates a UNC path, it's treated as a full path.  
			For example: c:\\something or \\somemachine\something
			
			Otherwise it's treated as a path relative to where you virtual directory is
			located.
			
			LogEnabled turns on and off logging as a whole.
			LogSqlEnabled turns on and off just the logging of SQL statements, but
			that's about 98% of what gets logged, so if you want to reduce the
			volume, turn that off.
			
		-->
		<add key="LogEnabled" value="1" />
		<add key="LogSqlEnabled" value="1" />
		<add key="LogFileFolder" value="App_Data\logs" />
		<!-- If BugTracker.NET itself experiences an error, it can send an email notification -->
		<add key="ErrorEmailEnabled" value="1" />
		<add key="ErrorEmailTo" value="erik.d.gross@gmail.com" />
		<add key="ErrorEmailFrom" value="errors@learncodinganywhere.com" />
		<!--
			You can "subscribe" to email notifications on a per-bug basis.
			You will receive an email whenever the bug is updated.
			
			
		-->
		<add key="NotificationEmailEnabled" value="1" />
		<!-- 
			Just demo'ing here how to make the email address friendlier:
			<add key="NotificationEmailFrom" value="&quot;Customer Support&quot;&lt;support@example.com&gt;"/> 
		-->
		<add key="NotificationEmailFrom" value="notify@techacademytracker.com" />
		<!--
			This controls the format of the subject of the email notifications.
			The available variables are:
			$THING$ - from the "SingularBugLabel" setting
			$BUGID$
			$ACTION$ - added or changed
			$SHORTDESC$
			$PROJECT$
			$CATEGORY$
			$ORGANIZATION$
			$PRIORITY$
			$STATUS$
			$TRACKINGID$ - from the "TrackingIdString" setting
			$ASSIGNED_TO$
		-->
		<add key="NotificationSubjectFormat" value="$THING$:$BUGID$ was $ACTION$ - $SHORTDESC$ $TRACKINGID$" />
		<!--
			Ignore this setting unless you are experiencing violations of Medium Trust when sending email
			on a shared host due to ConfigurationManager permission.  Use this to specify whether to send
			emails via SSL or not.
		-->
		<!--
			<add key="SmtpForceSsl" value="1"/>
		-->
		<!--
			Ignore this setting unless you are esperiencing the symptoms
			related to this: http://cr.yp.to/docs/smtplf.html
		-->
		<!--
		<add key="SmtpForceReplaceOfBareLineFeeds" value="1"/>
		-->
		<!-- 
			Dates fetched by the datepicker popup are formatted
			using the following specifiers.
			
			Set the second to your local date format without time
		
			   The format can be combinations of the following:
			   d  - day of month (no leading zero)
			   dd - day of month (two digit)
			   D  - day name short
			   DD - day name long
			   m  - month of year (no leading zero)
			   mm - month of year (two digit)
			   M  - month name short
			   MM - month name long
			   y  - year (two digit)
			   yy - year (four digit)		
			   
			   
		-->
		<add key="DatepickerDateFormat" value="yy-mm-dd" />
		<!--
			These settings control how dates are displayed in the
			web pages.  It's not a perfect scheme, but the logic
			tries to display both the date and the time when that
			seems to be the right thing, and just the date, without
			the time, when that seems to be the right thing.
			
			See "Custom Date and Time Format Strings" for the .NET
			System.DateTime for the format specifiers you can use:
			http://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx
		-->
		<!-- American style -->
		<add key="DateTimeFormat" value="yyyy-MM-dd h:mm tt" />
		<add key="JustDateFormat" value="yyyy-MM-dd" />
		<!-- European style
		<add key="DateTimeFormat" value="dd.MM.yy HH:mm" />
		-->
		<!--
			This is used to convert the datetime into the format
			expected by SQL Server.
		
			Format SQL Server expects the dates to be in
			This doesn't affect what user sees on web pages.
		<add key="SQLServerDateFormat" value="yyyyMMdd HH\:mm\:ss"/>
		-->
		<!--
			If category/project/status/priority are not enough bug attributes
			for you, here's one more that you can name yourself.
			
			This is just one of the ways, a simple way, of creating
			custom fields.  For more info, visit
			http://www.ifdefined.com/README.html
		-->
		<add key="ShowUserDefinedBugAttribute" value="0" />
		<add key="UserDefinedBugAttributeName" value="YourAttribute" />
		<!--
			This controls whether entries are inserted into the bug_history table
			when the user changes description, category, priority, assigned to. or status.
		-->
		<add key="TrackBugHistory" value="1" />
		<!--
			When per-project permission is not specified, what is the permission?
			3 = "reporter" allow adds but after bug is added, only allow posting of additional comments
			2 = allow everything
			1 = allow view only
			0 = hide
		-->
		<add key="DefaultPermissionLevel" value="2" />
		<!--

			Set WindowsAuthentication to "1" if you want to use
			windows authentication instead of the logon page.

			1) Configure your IIS virtual directory so that anon
			access is unchecked and windows authentication is checked

			2) Configure IE to automatically send username and
			password

			3) Usernames in users table should match your
			windows usernames. Passwords in users table will be
			ignored.

			If you want BOTH modes to work, set "WindowsAuthentication"
			to "2".

			Configure your IIS virtual directory as normal (allowing
			anon access).   Follow these instrunctions for the file "loginnt.aspx":

			* From IIS Manager, right-click the file loginnt.aspx and select properties
			* Select the Security tab
			* Click Edit in the Anonymous Access and Authentication frame
			* Ensure Anonymous Access and Basic Authentication is cleared
			* Ensure Integrated Windows Authentication is selected
			* Click OK
			* Select the Custom Errors tab
			* Select HTTP Error 401;2 and click Edit Properties
			* Set the message type to File and select the file login.htm, including the full local path. (Note that this must be a file	reference and not a URL)

			The idea is that when the user access default.aspx, it redirects to loginnt.aspx.
			When access to loginnt.aspx is denied, IIS resonds with the custom error login.htm.
			Login.htm then redirects to default.aspx.

		-->
		<add key="WindowsAuthentication" value="0" />
		<!--
			You can have BugTracker.NET check the user's password using an LDAP server instead of
			checking it in the database.  You still have to create a BugTracker.NET user. It's only
			the password that get's checked.
			
			To use LDAP, set AuthenticateUsingLdap to 1 and enter the appropriate distinguished name.
			The $REPLACE_WITH_USERNAME$ gets replaced with the username that's typed in by the user
			when he tries to log on.

        	The LDAP auth type used when checking users' passwords using LDAP.
        	Choices are:
				Anonymous
				Basic
				Negotiate
				Ntlm
				Digest
				Sicily
				Dpa
				Msn
				External
				Kerberos

        	For details, see:
        	http://msdn.microsoft.com/en-us/library/system.directoryservices.protocols.authtype.aspx
		-->
		<add key="AuthenticateUsingLdap" value="0" />
		<!--			
			These values worked for me when I tested with OpenLDAP
		-->
		<!--
		<add key="LdapServer" value="127.0.0.1"/>
		<add key="LdapUserDistinguishedName" value="uid=$REPLACE_WITH_USERNAME$,ou=people,dc=mycompany,dc=com"/>
		<add key="LdapAuthType" value="Basic"/>
		-->
		<!--
			There's a special user in the database, "guest". Think of it as a user account that can
			be shared by several people. The guest user can't save settings and can't save searches.
			If "AllowGuestWithoutLogin" is set to "0", and if you set the guest user to active,
			then the guest user still has to login with a password.  If set to "1", then the guest 
			user doesn't need to even enter a password.	Instead, a link will appear on the login page, 
			default.aspx, saying:
			
			Continue as "guest" without logging in
			
			You can control the per-project permissions of the guest user in the same way as other
			users EXCEPT that even if you give the guest user permissions beyond View Only and Reporter,
			the system will automatically reduce his permissions downward.
		-->
		<add key="AllowGuestWithoutLogin" value="0" />
		<!--
			If you have windows security turned on, and if you set 
			EnableWindowsUserAutoRegistration to "1", then windows users will be
			automatically added to the BugTracker.NET database as users.
			
			The new user will be a clone of the user specified in
			WindowsUserAutoRegistrationUserTemplate
		-->
		<add key="EnableWindowsUserAutoRegistration" value="0" />
		<!--
		
			When creating a new user as a result of a auto-registration
			use an existing user's settings, permissions, etc as a template
			for the new user

		-->
		<add key="WindowsUserAutoRegistrationUserTemplate" value="guest" />
		<add key="EnableWindowsUserAutoRegistrationLdapSearch" value="0" />
		<!-- 
			Configure how you want BugTracker.NET to search LDAP for a new user's info.
			In the examples below, BugTracker.NET logic will replace the "$REPLACE_WITH_USERNAME$" part
			with the user who is visiting the BugTracker.NET website for the first time.
			
			Replace "mycompany" with your company's domain.
			Replace "ExampleUsername" with the username IIS needs to use to connect to your AD or LDAP.  And replace the password, of course.
			The tricy parts are "LdapDirectoryEntryAuthenticationType" and the parts that vary if your schema varies.

			Authentication types are as follows:
				None
				Secure
				Encryption
				SecureSocketsLayer
				ReadonlyServer
				Anonymous
				FastBind
				Signing
				Sealing
				Delegation
				ServerBind
			For details, see:
			http://msdn.microsoft.com/en-us/library/system.directoryservices.authenticationtypes.aspx				

		-->
		<!--			
			These values worked for me when I tested with OpenLDAP
		-->
		<!--		
		<add key="LdapDirectoryEntryPath" value="LDAP://127.0.0.1/DC=mycompany,DC=com" />
		<add key="LdapDirectoryEntryAuthenticationType" value="Anonymous" />
		<add key="LdapDirectoryEntryUsername" value="" />
		<add key="LdapDirectoryEntryPassword" value="" />
		<add key="LdapDirectorySearcherFilter" value="(uid=$REPLACE_WITH_USERNAME$)" />
		<add key="LdapFirstName" value="gn" />
		<add key="LdapLastName" value="sn" />
		<add key="LdapEmail" value="mail" />
		<add key="LdapEmailSigniture" value="cn" />
		-->
		<!--			
			These values worked for me when I tested with Microsoft "ADAM" on another machine
		-->
		<!--
		<add key="LdapDirectoryEntryPath" value="LDAP://192.168.1.113:389/DC=mycompany,DC=com" />
		<add key="LdapDirectoryEntryAuthenticationType" value="None" />
		<add key="LdapDirectoryEntryUsername" value="cn=ExampleUsername,ou=people,dc=mycompany,dc=com" />
		<add key="LdapDirectoryEntryPassword" value="PASSWORD GOES HERE" />
		<add key="LdapDirectorySearcherFilter" value="(uid=$REPLACE_WITH_USERNAME$)" />
		<add key="LdapFirstName" value="givenName" />
		<add key="LdapLastName" value="sn" />
		<add key="LdapEmail" value="mail" />
		<add key="LdapEmailSigniture" value="cn" />
		-->
		
		<!--			
			"bhawkins" reported in the forum that these settings worked for his place.
		-->
		<!--
		<add key="LdapDirectoryEntryPath" value="LDAP://DC=mycompany,DC=com" />
		<add key="LdapDirectoryEntryAuthenticationType" value="Secure" />
		<add key="LdapDirectoryEntryUsername" value="CN=ExampleUsername,OU=Service account,OU=Admin Service,DC=mycompany,DC=com" />
		<add key="LdapDirectoryEntryPassword" value="PASSWORD GOES HERE" />
		<add key="LdapDirectorySearcherFilter" value="sAMAccountName=$REPLACE_WITH_USERNAME$" />
		<add key="LdapFirstName" value="givenname" />
		<add key="LdapLastName" value="sn" />
		<add key="LdapEmail" value="mail" />
		<add key="LdapEmailSigniture" value="cn" />
		-->

		<!-- "th" reported that this worked -->
		<!--
		<add key="LdapDirectoryEntryPath" value="LDAP://servername/DC=mycompany,DC=local" />
		<add key="LdapDirectoryEntryAuthenticationType" value="ReadonlyServer" />
		<add key="LdapDirectoryEntryUsername" value="CN=ExampleUsername,CN=users,DC=mycompany,DC=local" />
		<add key="LdapDirectoryEntryPassword" value="PASSWORD GOES HERE" />
		<add key="LdapDirectorySearcherFilter" value="sAMAccountName=$REPLACE_WITH_USERNAME$" />
		<add key="LdapFirstName" value="givenname" />
		<add key="LdapLastName" value="sn" />
		<add key="LdapEmail" value="mail" />
		<add key="LdapEmailSigniture" value="cn" />		
		-->
		
		<!--
			TextArea for Custom fields
			This setting is used to format custom defined fields.  If a field is greater than TextAreaThreshold, it will be
			displayed as a TextArea instead of a normal Input control.  The number of rows in the TextArea is
			determined by dividing the field length by TextAreaThreshold up to a maximum value indicated by MaxTextAreaRows.
		-->
		<add key="TextAreaThreshold" value="80" />
		<add key="MaxTextAreaRows" value="3" />
		<!--
			Some folks don't like the word "bug".   These next four settings allow you to 
			override the text of the logo and the word bugs.
		-->
		<add key="AppTitle" value="PITC Bugtracker" />
		<add key="SingularBugLabel" value="item" />
		<add key="PluralBugLabel" value="items" />
		<!-- customize marker for creating hyperlinks in bug comments -->
		<add key="BugLinkMarker" value="bugid#" />
		<!--
			In dropdowns featuring users, do you want to see the logon names or their full names, in
			"LastName, FirstName" format?

			If you set this to "1", for the user-related filter dropdowns to work, you will also 
			have to adjust your SQL that you use for the bug lists.   Your SQL will need to end
			up with parts of it looking something like this.   The names of the columns must
			be "reported by" and "assigned to" because the logic that creates the filter dropdowns
			looks for those names.

			~
			~
			rpt.us_lastname + ', ' + rpt.us_firstname [reported by], 
			asg.us_lastname + ', ' + asg.us_firstname [assigned to],
			~
			~
			left outer join users rpt ...
			left outer join users asg...

		
		-->
		<add key="UseFullNames" value="0" />
		<!--
			In edit_bug.aspx, you can have your own link appear:
			<a href="your_url.aspx?bugid=...">YOUR LINK</a>

			You have to HTML encode any HTML tags embedded here.

		-->
		<!--
		<add key="CustomBugLinkLabel" value="YOUR LINK"/>
		<add key="CustomBugLinkUrl" value="your_url.aspx"/>
		-->
		<!--
			You can add to the menu, just to the left of the "go to ID" button.
			You have to HTML encode any HTML tags embedded here.
		-->
		<!--
		<add key="CustomMenuLinkLabel" value="YOUR LINK"/>
		<add key="CustomMenuLinkUrl" value="your_url.aspx"/>
		-->
		<!--
			You can add a link to a bug post (comment, attachment, email, etc)
			Your link will looks something like this:
			<a href="your_url.aspx?postid=99999">YOUR LINK</a>

			You have to HTML encode any HTML tags embedded here.

			Jochen Jonckheere has contributed a fun sample that uses
			a web service to translate the text of a bug comment.  
		-->
		<!--
		<add key="CustomPostLinkLabel" value="translate"/>
		<add key="CustomPostLinkUrl" value="translate.aspx"/>
		-->
		<!--
			Customize the text that appears in the subject of emails that allows
			us to related incoming emails to the bugids they refer to.   We parse
			these words in the subject to get the bugid.
		-->
		<add key="TrackingIdString" value="DO NOT EDIT THIS:" />

		<!--
			If you want replies to be generated automatically.
		-->
		<add key="AutoReplyText" value="Thanks for you email. Don't call us, we'll call you." />
		<add key="AutoReplyUseHtmlEmailFormat" value="0" /> 

		<!--
			SearchSQL allows you to customize the columns, etc that are displayed on the "search"
			page, search.aspx.

			The "[br]" characters are replaced by line breaks.   They are there to make the SQL
			display nicely, but the SQL will work without them too.

			The "$WHERE$" marks the spot in the SQL where the logic will modify the where
			clause based on what the user entered in the search form.
		-->
		<!--
		<add key="SearchSQL" value="[br]select isnull(pr_background_color,'#ffffff') [color], bg_id [id],
[br]bg_short_desc [desc] /* *** ADD OTHER COLUMNS YOU WANT HERE **** */
[br]from bugs
[br]left outer join users rpt on rpt.us_id = bg_reported_user
[br]left outer join users asg on asg.us_id = bg_assigned_to_user
[br]left outer join projects on pj_id = bg_project
[br]left outer join categories on ct_id = bg_category
[br]left outer join priorities on pr_id = bg_priority
[br]left outer join statuses on st_id = bg_status
[br]left outer join user_defined_attribute on udf_id = bg_user_defined_attribute
[br]$WHERE$
[br]order by bg_short_desc
"/>
-->
		<!--
			Search has a "Suggest" feature like Google Labs "Suggest"
			at http://www.google.com/webhp?complete=1&hl=en.
			
			Suggest starts working after you type in 3 characters in the "description contains"
			field.   But you can change the number of characters required here.
		-->
		<add key="SearchSuggestMinChars" value="3" />

    <!--
			If you want emails handled by btnet_service.exe to automatically reset a bugs 
			status, set this to the st_id, the integer, of the status you want.   
			
			Set it to 0 to turn	this feature off.
		-->
		<add key="StatusResultingFromIncomingEmail" value="0" />
		<!-- 
			If you set this to 1, you will see an additional "Visible to internal users only"
			checkbox in pages to edit bugs, attachments, and comments.  If you check it, then
			that attachement or comment will not be visible to users who are marked "external".
			
			They ARE visible in prints for internal users, and they are visible when an
			internal users checks "Include print of Bug" when sending email.
			
			If you want the entire bug to be private, create another project and don't give
			the external users permissions for that project, and then assign the bug to that other
			project. 
		-->
		<add key="EnableInternalOnlyPosts" value="1" />





		<!--
			Turning this on make a "revisions" link visible on the edit bug page.
			Svn_hook_for_btnet.rename_to_py is the hook script for integrating svn
			and BugTracker.NET.  Edit the settings here, install the hook script,
			and edit the values in the hook script.  There are more instructions in
			the hook script file.
		-->
		<add key="EnableSubversionIntegration" value="0" />
		<!-- 
			svn.exe, the Subversion client, needs to be on the web server
		-->
		<add key="SubversionPathToSvn" value="C:\Program Files (x86)\Subversion\bin\svn.exe" />
		<add key="SvnHookUsername" value="admin" />
		<!-- 
			If BugTracker.NET needs a username and password to access a repository,
			it will look them up here.  The key is the repository.  The value is
			the username and password separated by a "|" character.
		-->
		<add key="svn://127.0.0.1/mysvn_repo" value="corey|password" />
		<!--  
			You can specify some additional arguments that will get appened to every svn command.	
		
			I found that on Windows 7 I needed to copy the C:\Users\corey\AppData\Roaming\Subversion 
			folder so that it was not under C:\Users. 
		-->
		<add key="SubversionAdditionalArgs" value=" --config-dir c:\cit\mysvn_config" />
		<!-- First, look for bugid at end of checkin message, the way ToroiseSVN does it -->
		<add key="SvnBugidRegexPattern1" value="([0-9,]+$)" />
		<!-- If not there, look to see if message starts with an integer -->
		<add key="SvnBugidRegexPattern2" value="(^[0-9,]+ )" />
		<!--
			Turning this on make a "commits" link visible on the edit bug page.
			Git_hook_for_btnet.rename_to_py is the hook script for integrating git 
			and BugTracker.NET.  Edit the settings here, install the hook script, 
			and edit the values in the hook script.  There are more instructions in the
			hook script file.
		-->
		
		<!--
			This is a hack. My logic in the svn pages doesn't handle files that have
			been renamed, like, if you want to diff revision 2 "new_name.txt" 
			with revision 1 "old_name.txt". Set this to "1" in and the logic will 
			trust paths in the urls. It makes a little hole in the permissions, but
			you probably don't care, because somebody could theoretically look at a 
			file that's unrelated to a bug they have permission for.
		-->
		<add key="SvnTrustPathsInUrls" value="0" />
		
		<add key="EnableGitIntegration" value="0" />
		<!-- 
			git.exe, the git client, needs to be on the web server
		-->
		<add key="GitPathToGit" value="C:\Program Files (x86)\Git\bin\git.exe" />
		<!-- 
			The username that the git hook sends to the web server has to
			match this user. svn_hook.aspx checks that the request is
			coming from this username.
		-->
		<add key="GitHookUsername" value="admin" />
		<add key="GitBugidRegexPattern" value="(^[0-9]+)" />
		<!-- 
			Mercurial integration.
			Works just like the git integration, so see comments above for git.
		-->
		<add key="EnableMercurialIntegration" value="0" />
		<add key="MercurialPathToHg" value="c:\Program Files (x86)\Mercurial\hg.exe" />
		<add key="MercurialHookUsername" value="admin" />
		<add key="MercurialBugidRegexPattern" value="(^[0-9]+)" />
		<!--
			These entries control where attachment file are uploaded to and how large
			the files can be.
			
			If StoreAttachmentsInDatabase is set to "1", all new attachments
			will be stored in the SQL database. If StoreAttachmentsInDatabase
			is set to "0", all new attachments will be stored in the
			folder indentified by the UploadFolder setting (if uncommented).
			
			For the UploadFolder setting, if you specify the folder starting with a 
			drive letter or the \\ that indicates a UNC path, it's treated as a full path.  
			For example: c:\\something or \\somemachine\something

			Otherwise it's treated as a path relative to where you virtual directory is
			located.

			Database storage of attachments is backward compatible with
			the prior version of BugTracker.NET. If the attachment cannot
			be found in the database, BugTracker.NET will check the
			UploadFolder. Therefore, you may enable StoreAttachmentInDatabase
			even if you have previously used UploadFolder.
		-->
		<!--
			Turning this on make a "commits" link visible on the add/edit bug page.
			See the "git" folder for hook scripts that will integrate git with
			BugTracker.NET.  For installation instructions, read the comments in
			the script.
		-->
		<add key="StoreAttachmentsInDatabase" value="1" />
		<add key="UploadFolder" value="App_Data\uploads" />
		<!-- MaxUploadSize here is bytes.  See also maxRequestLength above in KB, not bytes -->
		<add key="MaxUploadSize" value="5000000" />
		<!-- 
			For now (version 3.6.7) just used to control how long to wait for inserting attachements in the db.
			Maybe in future versions it will be used for other queries.  30 seconds is the default.
		-->
		<add key="SqlCommand.CommandTimeout" value="30" />
		<!--
			If set to "1", then passwords need to be at least 8 characters long.
			The characters in the password need to be from at least 2 of the
			following categories:
			* lowercase letters
			* uppercase letters
			* numbers
			* special chars
		-->
		<add key="RequireStrongPasswords" value="0" />
		<!--
			Show "Forgot Password?" link.
		-->
		<add key="ShowForgotPasswordLink" value="0" />
		<!--
			Allow people to self-register.
			You must also set "SelfRegisteredUserTemplate".
			You should also consider setting "RequireStrongPasswords"
		-->
		<add key="AllowSelfRegistration" value="0" />
		<!--
			When creating a new user as a result of a self-registration,
			use an existing user's settings, permissions, etc as a template
			for the new user
		-->
		<add key="SelfRegisteredUserTemplate" value="guest" />
		<!--
			Number of minutes a new user has between the time they register
			and the time they must confirm the registration by clicking on
			the link they received by email
		-->
		<add key="RegistrationExpiration" value="20" />
		<!--
			Some people have reported problems with the HTML TABLE borders 
			missing in email notifications.  Actually, the css settings 
			seem to get ignored entirely.  Setting this to "1"
			will force the table to have borders even without css.
		-->
		<add key="ForceBordersInEmails" value="0" />
		<!--
			If this is set to "1", then the list of user names in the dropdowns
			in the search page is limited to those users who have either reported bugs
			or have bugs currently assigned to them.  Setting this to "1" might
			make the search page load slower. Setting it to "0" might result in
			too many names in the dropdowns on the search page.
		-->
		<add key="LimitUsernameDropdownsInSearch" value="0" />
		<!--
			Enabling tags lets you mark bugs with your own free-form keywords and 
			then filter bug lists using your keywords.  
			
			Note that you might not want to use this feature if you are also using
			tricky permissions, because the page that displays already-used tags
			and their counts looks at all bugs, not just the bugs that the user
			is elegible to see.   That is, if somebody with rights only to project A
			tags 3 bugs with "Foo", then somebody with rights only to project B
			will see "Foo(3)" in the tags.aspx page.   Maybe that matters to you, 
			maybe not.
			
		-->
		<add key="EnableTags" value="0" />
		<!--
			I'm not 100% sure that FCKEditor, or the way I'm using FCKEditor, 
			is secure.  It might be possible to use it for Cross-Site-Scripting.
			If you don't trust it, or me, set this to 1.
		-->
		<add key="DisableFCKEditor" value="0" />
		<!--
			If your view_attachment.aspx isn't working when you are trying to download
			a large file, then try setting this to 1.  
			But you might have problems on  Windows Server 2000:
			http://support.microsoft.com/?kbid=902780
		-->
		<add key="UseTransmitFileInsteadOfWriteFile" value="0" />
		<!--
			BugTracker.NET can remember which bugs you have seen or not.  To
			enable this feature, set this to 1.  You also have to include
			the $SEEN magic word in your query as explained in edit_query.aspx
		-->
		<add key="EnableSeen" value="1" />
		<!--
			People can vote for their favorte bug. To enable this feature, set 
			this to 1.  You also have to include the $VOTE magic word in your 
			query as explained in edit_query.aspx     
		-->
		<add key="EnableVotes" value="1" />
		<!--
			Enabling this adds a "news" link to the menu that goes across the page.
			Click on the "news" page, leave it up, and it will refresh itself as people 
			add and change bugs. 
			
			IMPORTANT:
			It doesn't obey any permissions, so you probably don't want to use this
			page if you also use project or organization permissions.
		-->
		<add key="EnableWhatsNewPage" value="0" />
		<add key="WhatsNewPageIntervalInSeconds" value="20" />
		<add key="WhatsNewMaxItemsCount" value="200" />
		<!--
			Something I use for debugging, in conjunction with the view_memory_log.aspx.
			Only useful for a programmer.  If you are interested, search the code
			for MemoryLogEnabled.
		-->
		<!--
		<add key="MemoryLogEnabled" value="1" />		
		-->
		<!--
			Use this to turn on/off the full text search in the upper right corner.
			I think, the only reason to turn it off is if you have some technical problem 
			with it.
		-->
		<add key="EnableLucene" value="1" />
		<add key="LuceneIndexFolder" value="App_Data\lucene_index" />
		<!--
			Adds a button to the top of the form too.
		-->
		<add key="DisplayAnotherButtonInEditBugPage" value="0" />
		<!--
			Adds the "tasks/time" link to edit_bug page, which you can use for entering
			sub-tasks, entering time-tracking info, entering scheduling info.   It's
			flexible.   See the "ShowTask.." settings below also.
		-->
		<add key="EnableTasks" value="0" />
		<!--  These control the default selections in the task dropdowns -->
		<add key="TaskDefaultDurationUnits" value="hours" />
		<add key="TaskDefaultHour" value="09" />
		<add key="TaskDefaultStatus" value="[no status]" />
		<!--
			Use these settings to show LESS in the tasks/time pages.
			
			So, for example, if you are using tasks just for time tracking,
			you might only want to show the "Actual Duration" column and
			hide the others.
			
			Or,if you are using tasks as sub-tasks, you might only want to
			show the "Status" and "Assigned To" columns and hide the 
			others.
			
			Or, if you are using tasks for estimation, you might only want
			to show the "Planned Duration" and "Percent Complete" columns.
			
		-->
		<!--
		<add key="ShowTaskAssignedTo" value="0" /> 
		<add key="ShowTaskPlannedStartDate" value="0" /> 
		<add key="ShowTaskActualStartDate" value="0" /> 
		<add key="ShowTaskPlannedEndDate" value="0" /> 
		<add key="ShowTaskActualEndDate" value="0" /> 
		<add key="ShowTaskPlannedDuration" value="0" /> 
		<add key="ShowTaskActualDuration" value="0" /> 
		<add key="ShowTaskDurationUnits" value="0" /> 
		<add key="ShowTaskPercentComplete" value="0" /> 
		<add key="ShowTaskStatus" value="0" /> 
		<add key="ShowTaskSortSequence" value="0" /> 
		-->
		<!--
			Enables the "relationships" link on the edit bug page.
		-->
		<add key="EnableRelationships" value="0" />
		<!--
			Different versions of ASP.NET give the form different names.  If you are
			having problems paging or sorting the bug list, if you are getting 
			javascript errors, then do a view source to see	what the form name is, 
			and then put that here.			
		-->
		<!--
		<add key="AspNetFormId" value="ctl00" />
		-->
		<!--
			If you want to create users automatically from incoming emails, then 
			set this value to the same BugTracker.NET username as btnet_service.exe.
			So, for example, if btnet_service.exe logs on as "email", then set this
			to "email".
			
			BugTracker.NET will create new users by copying the username specified
			in the "CreateUsersFromEmailTemplate" setting.
			
			The new users username will be the "from" email address.
		-->
		<add key="CreateUserFromEmailAddressIfThisUsername" value="btnet_service.exe username goes here" />
		<!--
			The new users created via email will be clones of the user specified here.
		-->
		<add key="CreateUsersFromEmailTemplate" value="customer1" />
		<!--
			If you are using the settings above, CreateUserFromEmailAddressIfThisUsername
			and CreateUsersFromEmailTemplate, then you can also allow incoming emails 
			to create new organizations.
			
			The user will still be created with the user template EXCEPT that instead
			of the template user's org, the system will create a new org using the 
			incoming email address's domain name.  So, if jsmith@example,com sends
			an email, the system will create an org, "example.com" based on the template
			user's org a user, "jsmith@example.com", based on the template user.
		-->
		<add key="UseEmailDomainAsNewOrgNameWhenCreatingNewUser" value="0" />
		<!--
			For throttling brute force attempts, only allow N failed attempts in the most recent N minutes
			for a given username.
		-->
		<!--
		<add key="FailedLoginAttemptsMinutes" value="10"/>
		<add key="FailedLoginAttemptsAllowed" value="10"/>
		-->
		<!--
			Controls whether bug posts are displayed with the most recent listed first, "desc"
			or the least recent listed first, "asc"
		-->
		<!--
		<add key="CommentSortOrder" value="desc"/>
		-->
		<!--
			The times in the database are in the server's time zone.
			If all your users are in another time zone and you'd like to display the times
			in that, use this offset.
		-->
		<!--
			<add key="DisplayTimeOffsetInHours" value="0"/>
		-->
		<!--
			Work around a problem that some users are having when email addresses are in the format:
				Corey Trager <ctrager@yahoo.com>
			instead of
				ctrager@yahoo.com
		-->
		<!--
			<add key="StripDisplayNameFromEmailAddress" value="1"/>
		-->
		<!--
			This SQL is executed in insert_bug.aspx after a bug has been inserted.
			You could use it, for example, to update custom fields, or to implement a more 
			complicated way of assigning the bug to the riht person.

			$BUGID$ gets replaced by the newly inserted bug's id.

			This gets executed as a batch of sql, so there can be more than one
			update statement.

			If you use < or > in this SQL, code it as &lt; &gt;
		-->
<!--		
		
		<add key="UpdateBugAfterInsertBugAspxSql" value="   
	/* 
		Sample custom post insert sql for insert_bug.aspx 
		The sample demos setting the priority based on which user reported the bug.

	*/		

	declare @username varchar(100)

	select @username = us_username from bugs inner join users on bg_reported_user = us_id
		where bg_id = $BUGID$ 

	update bugs set 
	bg_priority = 
	case 
		when @username like '%admin%' then 3
		when @username like '%tester%' then 2
		else 1
		end
	where bg_id = $BUGID$
 
	"/>

-->
		<!--
			HTML attachments to bugs or emails could contain malicious javascript.
			BugTracker.NET before version 3.5.3 made it too easy to view these 
			attachments. If you want the older, more dangerous behavior, set the
			value here to "1".
		-->
		<add key="ShowPotentiallyDangerousHtml" value="0" />

		<!--
			Some folks my want to change this to a semi-colon, for example
		-->
		<!--
		<add key="EmailAddressSeparatorCharacter" value=","/>
		-->
		
		<!-- 
			New as of Jan 2013: A few pages with mobile friendly layouts.
			
			Login at mlogin.aspx for mobile. 
			
			!!! IMPORTANT: These pages don't respect project or org permissions.
			If you rely on permissions, don't enable them.
			
			
		-->
		<add key="EnableMobile" value="0" />
		
		
		<!--
			There two ways to handle incoming emails.  One way is to use btnet_service.exe
			which has its own config settings and a second way is to enable a pop3 worker
			thread in the ASP.NET app itself.
			
			The advantages of using btnet_service.exe are:
			* Has been used by many since 2003.  The ASP.NET thread approach is new in Dec, 2010.
			* One service can handle multiple BugTracker.NET websites.
			* Pushes to website via HTTP, so should work in every situation.  The ASP.NET
			worker thread approach violates "Medium Trust", a configuration used by shared hosting
			services like GoDaddy.
	
			The advantages of using the ASP.NET worker thread are:
			* Easier setup and configuration.  Configure everything here, rather than in
			btnet_service.exe.config.

		-->
		<add key="EnablePop3" value="0" />
		<add key="Pop3Server" value="pop.gmail.com" />
		<add key="Pop3Port" value="995" />
		<add key="Pop3UseSSL" value="1" />
		<!--
			How frequently should btnet check the pop3 server for emails?
		-->
		<add key="Pop3FetchIntervalInMinutes" value="1" />
		<!--
			Username that the pop3 logic uses when creating bugs from emails
		-->
		<add key="Pop3ServiceUsername" value="admin" />
		<!--
			How many errors should we allow before the fetch loop automatically 
			stops?  This is to prevent some glitch causing the logic to create
			thousands of bad entries.
		-->
		<add key="Pop3TotalErrorsAllowed" value="100" />
		<!--
			Are you Swedish?
			
			Turning this on changes how the service reads its input.  If you are 
			finding that special characters have been mysteriously stripped out
			of the incoming emails, set this to "1" and see if it helps.				
		-->
		<add key="Pop3ReadInputStreamCharByChar" value="0" />
		<!--
			Only retrieve messages if their subject contains the magic string below.
			If the value is blank, then btnet_service.exe will retrieve all messages.
			Probably for your production, the value should be blank.
		-->
		<add key="Pop3SubjectMustContain" value="" />
		<!--
			Skip message if the subject contains the magic string below.
			You can specify multiple strings by separating them with a 
			pipe character like this:
			"string one|string two|string three"
		-->
		<add key="Pop3SubjectCannotContain" value="" />
		<!--
			Only retrieve messages if their "from" address contains the magic string below.
			If the value is blank, then btnet_service.exe will retrieve all messages.
			Probably for your production, the value should be blank.
		-->
		<add key="Pop3FromMustContain" value="" />
		<!--
			Skip message if the "from" address contains the magic string below.
			You can specify multiple strings by separating them with a 
			pipe character like this:
			"string one|string two|string three"
		-->
		<add key="Pop3FromCannotContain" value="" />
		<!--
			For my own testing, it was useful to have this option.
			For production the value should be 1.
		-->
		<add key="Pop3DeleteMessagesOnServer" value="1" />
		<!--
			For diagnosing problems.
		-->
		<add key="Pop3WriteRawMessagesToLog" value="0" />
	</appSettings>
</configuration>
