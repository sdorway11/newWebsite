<!--
	Used by btnet_service.exe and btnet_console.exe.  These fetch messages
	from a pop3 server and stuff them into the database as bugs.   Go to admin,
	projects, and enter a pop3 username and password for each project that you
	are interested in.   One email account per project.   Don't forget to check
	the "enabled" checkbox.   Then make sure these settings are ok.

	btnet_console.exe is easier to use for getting things up and running.  It
	writes lots of little debugging error messages.    After that's working, install
	and use btnet_service.exe instead.   You'll probably also want to change
	the "DeleteMessagesOnServer" setting from "0" to "1".
	
	btnet_service.exe expects this file to be located at this path only:
	c:\btnet_service.exe.config.
	
	For btnet_console.exe, you pass the path to this file as a command line
	argument.

	You can have multiple <Website> elements in this file so that one instance
	of btnet_service can serve multiple websites.     Just make another copy of 
	the Website section and change your desired sections.   You'll almost certainly
	want the "InsertBugUrl" and "ConnectionString" settings to be different for
	a different website.
	
	If you are migrating from an older version of btnet_service that did not support
	multiple Website elements, just do the following:
	
	1) Change "pop3Settings" to "Website".
	2) Copy your ConnectionString so that it is somewhere WITHIN the Website section.
	3) Create a GlobalSettings section and put your FetchIntervalInMinutes into it.
	
-->

<configuration>

	<configSections>
		<section
			name="btnetSettings"
			type="System.Configuration.NameValueFileSectionHandler,System, Version=1.0.3300.0,Culture=neutral, PublicKeyToken=b77a5c561934e089" />
	</configSections>

	<btnetSettings>

		<GlobalSettings>
			<add key="LogFileFolder" value="c:\temp"/>
			<add key="LogEnabled" value="1"/>
			<!--
				How frequently should btnet_console.exe or btnet_service.exe check the server for emails?
			-->
			<add key="FetchIntervalInMinutes" value="15"/>
			<!--
				How many errors should we allow before the fetch loop automatically 
				stops? This is a safeguard in case there is some sort of problem with 
				the web server where insert_bug.aspx does succeed in inserting the bug, 
				but somehow fails to give a good response to this service.

				If the service doesn't get a good response, it will not delete the email 
				from the pop3 server and will try to insert the email again when the 
				fetch interval triggers another loop.    The result can be a lot of 
				duplicate bugs generated from the one problem email.   This has
				happened to a couple people....
..			-->
			<add key="TotalErrorsAllowed" value="100"/>


			<!--
				
				Are you Swedish?
				
				Turning this on changes how the service reads its input.  If you are 
				finding that special characters have been mysteriously stripped out
				of the incoming emails, set this to "1" and see if it helps.				
			-->
			<add key="ReadInputStreamCharByChar" value="0"/>



		</GlobalSettings>


		<Website>

			<!--
				This is the setting that btnet_console.exe or btnet_service.exe uses to post the bugs.
			-->
			<add key="InsertBugUrl" value="http://127.0.0.1/btnet/insert_bug.aspx"/>

			<!--
				This should be the same as Web.config's setting ConnectionString.
			-->
            <add key="ConnectionString" value="server=(local)\SQLEXPRESS;database=btnet;user id=sa;password=x;Trusted_Connection=no"/>			


			<!--
				Sample POP3 settings
			-->

			<!--
				SBC
			-->
			
			<!--
			<add key="Pop3Server" value="pop.att.yahoo.com"/>
			<add key="Pop3Port" value="995"/>
			<add key="Pop3UseSSL" value="1"/>
			-->

			<!--
				GMail
			-->
			
			
			<add key="Pop3Server" value="pop.gmail.com"/>
			<add key="Pop3Port" value="995"/>
			<add key="Pop3UseSSL" value="1"/>
			

			<!--
				BugTracker.NET username, password that btnet_server.exe will use
				to talk to BugTracker.NET.   These are not the username/password
				for the pop3 server itself - those come from the project rec in
				the projects table.
			-->
			<add key="ServiceUsername" value="email"/>
			<add key="ServicePassword" value="x"/>

			<!--
				Only retrieve messages if their subject contains the magic string below.
				If the value is blank, then btnet_service.exe will retrieve all messages.
				Probably for your production, the value should be blank.
			-->
			<add key="SubjectMustContain" value=""/>

			<!--
				Skip message if the subject contains the magic string below.
				You can specify multiple strings by separating them with a 
				pipe character like this:
				"string one|string two|string three"
			-->
			<add key="SubjectCannotContain" value=""/>


			<!--
				Only retrieve messages if their "from" address contains the magic string below.
				If the value is blank, then btnet_service.exe will retrieve all messages.
				Probably for your production, the value should be blank.
			-->
			<add key="FromMustContain" value=""/>

			<!--
				Skip message if the "from" address contains the magic string below.
				You can specify multiple strings by separating them with a 
				pipe character like this:
				"string one|string two|string three"
			-->
			<add key="FromCannotContain" value=""/>


			<!--
				For my own testing, it was useful to have this option.
				For production the value should be 1.
			-->
			<add key="DeleteMessagesOnServer" value="0"/>

			<!--
				For diagnosing problems, dump the message text to a file
			-->

			<!--
			<add key="MessageOutputFile" value="c:\temp\btnet_test_messages_out.txt"/>
			-->

			<!-- 
				For testing, read the message text from a file rather than from
				a POP3Server.

				Seperate multiple messages in the file with a line like this:
				Q6Q6

				Maximum of 100 test messages.
			-->
			<!--
			<add key="MessageInputFile" value="c:\temp\btnet_test_messages_in.txt"/>
			-->
			<!--
				Customize the text that appears in the subject of emails that allows
				us to related incoming emails to the bugids they refer to.   We parse
				these words in the subject to get the bugid.
				This MUST be the same as Web.config's setting "TrackingIdString".
			-->
			<!--
			<add key="TrackingIdString" value="DO NOT EDIT THIS:">
			-->

      <!--
        If the email fetching thread seems to be stuck for a couple hours, 
        kill it and spawn another.  This is a workaround because of the
        blocking socket reads in the code.
      -->
    	<add key="EnableWatchdogThread" value="1"/>
    	<add key="RespawnFetchingThreadAfterNSecondsOfInactivity" value="7200"/>


    </Website>
	</btnetSettings>

</configuration>
